#!/bin/bash
# Summary: Set or show the local application-specific php version
# Usage: $PROG $COMMAND [--apache]
#
# Set or show php local version setted in .envrc files
# By default, show php cli version
#
# When you run a php command, $PROG will look for a '.envrc'
# file in the current directory and each parent directory with a
# environment variable called 'PHP_CLI_DOCKER_IMAGE' for cli and
# 'PHP_SERVER_DOCKER_IMAGE' for apache server. If no such
# file is found in the tree, rbenv will use the global php version
# specified with '$PROG global'. A version specified with the
# environment variables takes precedence over local
# and global versions.
#
# <version> should be a string matching a php version known to phpdock
# see '$PROG versions'
#
# More information at https://github.com/lucasdc6/phpdock/README.md

set -e
[ -n "$PHPDOCK_DEBUG" ] && set -x

# Set config variables
PROG=`basename $0 | cut -d- -f1`
COMMAND=`basename $0 | cut -d- -f2`
MAIN_PATH=`realpath $0 | xargs dirname | xargs dirname`

function upsearch {
  slashes=${PWD//[^\/]/}
  directory="$PWD"
  for (( n=${#slashes}; n>0; --n ))
  do
    test -e "$directory/$1" && echo "$directory/$1" && return
    directory="$directory/.."
  done
}

# Function to update configuration's files
# Arguments
#   1: file to change
#   2: version to add in file
#   3: type (php-cli|php-apache) in env var format
#       PHP_CLI_DOCKER_IMAGE from php-cli
#       PHP_SERVER_DOCKER_IMAGE from php-apache
#   4: unset mode true
function change_file {
  if [ ! -e "$1" ]
  then
    echo "export $3=$2" > $1
  elif [ "$#" -eq 4 ]
  then
    sed -i "/export $3=.*/d" $1
  elif grep "^export $3=[[:print:]]*$" $1
  then
    sed -i -- "s~export $3=.*~export $3=$2~g" $1
  else
    echo "export $3=$2" >> $1
  fi
}

# Function to change local version of php
# Arguments
#   1: version to set as local
function change_php_local {
  ENVRC=`upsearch ".envrc"`
  if [ "$1" ]
  then
    change_file $ENVRC $1 "PHP_CLI_DOCKER_IMAGE" $2
    direnv allow
    echo "Local php version setted to $1 in file .envrc"
  elif [ -n "$ENVRC" ] && grep "PHP_CLI_DOCKER_IMAGE" $ENVRC > /dev/null
  then
    cat $ENVRC | grep "PHP_CLI_DOCKER_IMAGE" | cut -d= -f2
    exit
  else
    echo "$PROG: no local version configured for this directory"
    exit 1
  fi
}

# Function to change local version of php-apache
# Arguments
#   1: version to set as local
function change_apache_local {
  ENVRC=`upsearch ".envrc"`
  if [ "$1" ]
  then
    change_file $ENVRC $1 "PHP_SERVER_DOCKER_IMAGE"
    direnv allow
    echo "Local apache version setted to $1 in file .envrc"
  elif [ -n "$ENVRC" ] && grep "PHP_SERVER_DOCKER_IMAGE" "$ENVRC" > /dev/null
  then
    cat $ENVRC | grep "PHP_SERVER_DOCKER_IMAGE" | cut -d= -f2
  else
    echo "$PROG: no local apache version configured for this directory"
  fi
}

# Config getopt
TEMP=`getopt -o h --long apache,unset,help -n $PROG -- "$@"`
eval set -- "$TEMP"

# default value of apache
APACHE=false
OPTION=set

# Parse arguments
while true ; do
  case "$1" in
    --apache)
      APACHE=true
      shift;;
    --unset)
      OPTION=unset
      shift;;
    -h|--help)
      phpdock-help $COMMAND
      shift
      exit 0;;
    --) shift ; break ;;
    *) echo "Internal error!" ; exit 1 ;;
  esac
done

case "$OPTION" in
  set)
    if [ $APACHE = true ]
    then
      change_apache_local $1
    else
      change_php_local $1
    fi
  ;;
  unset)
    ENVRC=`upsearch ".envrc"`
    if [ $APACHE = true ]
    then
      change_file $ENVRC false "PHP_SERVER_DOCKER_IMAGE" true
    else
      change_file $ENVRC false "PHP_CLI_DOCKER_IMAGE" true
    fi
    direnv allow
esac
