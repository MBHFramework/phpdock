#!/bin/bash

set -e

# Get the basename of script
PROG=`basename $0`
MAIN_PATH=`realpath $0 | xargs dirname | xargs dirname`

# Avaiables repositories
#PHP_IMAGES=(cespi/php-5.3 chrodriguez/php-5.6 php)
PHP_IMAGES=( $(cat $MAIN_PATH/etc/repositories) )

# Help message
function show_help {
  cat <<FILE
  Usage:
        $PROG --local[=VERSION] [--apache]    Set or show the local php version (apply to directorie and all subdirectories)
                                               By default set a php-cli version
                                               Optionallity you can specify a php-apache version

        $PROG --global[=VERSION] [--apache]   Set or show the global php version
                                               By default set a php-cli version
                                               Optionallity you can specify a php-apache version

        $PROG --list [--apache]               List all available versions
                                               By default show php-cli versions
                                               Optionallity you can specify a php-apache version

        $PROG --install[=VERSION]             Install a php version from some of repositories.
                                               Format expected: $PROG --install REPOSITORY_NAME:TAG_NAME
                                               Example: $PROG --install cespi/php-5.3:cli
                                               If not specify a VERSION, it's taken from the following config files respectively:
                                                  * .envrc
                                                  * $MAIN_PATH/etc/php_global

        $PROG --versions                      List all php version aviables to set

  Repositories:
        $PROG --repositories                  List all availables repositories

        $PROG --add REPOSITORY                Add the reposotory

        $PROG --delete REPOSITORY             Delete the repository

  Help:
        $PROG --help  or  -h                  Display this help
FILE
}

# Show help if non arguments passed to script
[ "$#" -eq 0 ] && ( show_help; exit 1)

# Config getopt
TEMP=`getopt -o h --long local::,global::,list,install::,repositories,add:,delete:,versions,apache,help -n $PROG -- "$@"`
eval set -- "$TEMP"

function delete_ary_elmt {
  local word=$1      # the element to search for & delete
  local aryref="$2[@]" # a necessary step since '${!$2[@]}' is a syntax error
  local arycopy=("${!aryref}") # create a copy of the input array
  local status=1
  for (( i = ${#arycopy[@]} - 1; i >= 0; i-- )); do # iterate over indices backwards
    elmt=${arycopy[$i]}
    [[ $elmt == $word ]] && unset "$2[$i]" && status=0 # unset matching elmts in orig. ary
  done
  return $status # return 0 if something was deleted; 1 if not
}

# Function to update configuration's files
function change_file {
  if [ ! -e "$1" ]
  then
    echo "export $3=$2" > $1
  elif grep "^export $3=[[:print:]]*$" $1
  then
    sed -i -- "s/export $3=.*/export $3=$2/g" $1
  else
    echo "export $3=$2" >> $1
  fi
}

# Function to change local version of php
function change_php_local {
  if [ "$1" ]
  then
    change_file ".envrc" $1 "PHP_CLI_DOCKER_IMAGE"
    direnv allow
    echo "Local php version setted to $2 in file .envrc"
  elif [ -f ".envrc" ]
  then
    cat .envrc | grep "PHP_CLI_DOCKER_IMAGE" | cut -d= -f2
  else
    echo "$PROG: no local version configured for this directory"
  fi
}

# Function to change local version of php-apache
function change_apache_local {
  if [ "$1" ]
  then
    change_file ".envrc" $1 "PHP_SERVER_DOCKER_IMAGE"
    direnv allow
    echo "Local apache version setted to $2 in file .envrc"
  elif [ -f ".envrc" ]
  then
    cat .envrc | grep "PHP_SERVER_DOCKER_IMAGE" | cut -d= -f2
  else
    echo "$PROG: no local version configured for this directory"
  fi
}

# Function to change global version of php
function change_php_global {
  if [ "$1" ]
  then
    change_file "$MAIN_PATH/etc/php_global" $1 "PHP_CLI_DOCKER_IMAGE"
    echo "Global php version setted to $1 in file $MAIN_PATH/etc/php_global"
    echo -e "\nRemember restart your terminal"
  elif [ -f "$MAIN_PATH/etc/php_global" ]
  then
    cat $MAIN_PATH/etc/php_global | grep "PHP_CLI_DOCKER_IMAGE" | cut -d= -f2
  else
    echo "$PROG: no global version configured"
  fi
}

# Function to change global version of php
function change_apache_global {
  if [ "$1" ]
  then
    change_file "$MAIN_PATH/etc/php_global" $1 "PHP_SERVER_DOCKER_IMAGE"
    echo "Global php version setted to $1 in file $MAIN_PATH/etc/php_global"
    echo -e "\nRemember restart your terminal"
  elif [ -f "$MAIN_PATH/etc/php_global" ]
  then
    cat $MAIN_PATH/etc/php_global | grep "PHP_SERVER_DOCKER_IMAGE" | cut -d= -f2
  else
    echo "$PROG: no global version configured"
  fi
}

# Function to list php versions from repositories
function list_php_versions {
  for IMAGE in ${PHP_IMAGES[@]}
  do
    echo "In $IMAGE"
    docker_tags $IMAGE $1
  done
}

# Function to get installed versions
function show_versions {
  docker images | awk '{print $1":"$2}' | grep "php" | grep "cli"
    #docker images | awk '{print $1":"$2}' | awk -v pattern1="$IMAGE:[[:print:]]+cli[[:print:]]*" '$1 ~ pattern1'
}

# Function to get avaiables images from the repositories
function docker_tags {
  image="$1"
  tags=`wget -q https://registry.hub.docker.com/v1/repositories/${image}/tags -O -  | sed -e 's/[][]//g' -e 's/"//g' -e 's/ //g' | tr '}' '\n'  | awk -F: '{print $3}'`

  if [ -n "$2" ]
  then
    tags=` echo "${tags}" | grep "$2" `
  fi
  echo -e "${tags}\n"
}

# Function to install a php version
function install_php_version
{
  if [ "$1" ]
  then
    docker pull $1
  elif [ -f ".envrc" ]
  then
    echo -e "php version taken from file .envrc\n"
    cat .envrc | grep "PHP_CLI_DOCKER_IMAGE" | cut -d= -f2 | xargs docker pull
  elif [ -f "$MAIN_PATH/etc/php_global" ]
  then
    echo -e "php version taken from file $MAIN_PATH/etc/php_global\n"
    cat $MAIN_PATH/etc/php_global | cut -d= -f2 | xargs docker pull
  else
    echo "Please specify a php version"
  fi
}

function list_repos
{
  [ ${#PHP_IMAGES[@]} -eq 0 ] && (echo -e "Not repositories found.\nPlease add a repository with the option $PROG --add REPOSITORY"; exit 1)
  printf "Avaiables repositories:\n"
  printf "\t* %s\n" "${PHP_IMAGES[@]}"
}

function add_repo
{
  if [[ "${PHP_IMAGES[@]}" =~ "${1}" ]]
  then
    echo "$1 already in use"
  else
    PHP_IMAGES+=("$1")
    printf "%s\n" "${PHP_IMAGES[@]}" > $MAIN_PATH/etc/repositories
    echo "$1 added successfully"
  fi
}

function delete_repo
{
  if [[ "${PHP_IMAGES[@]}" =~ "${1}" ]]
  then
    #PHP_IMAGES=("${PHP_IMAGES[@]/$1}")
    delete_ary_elmt $1 PHP_IMAGES
    printf "%s\n" "${PHP_IMAGES[@]}" > $MAIN_PATH/etc/repositories
    echo "$1 deleted successfully"
  else
    echo -e "$1 not found\n"
    list_repos
  fi
}

APACHE=false

while true ; do
  case "$1" in
    --local)
        OPT="local"
        PARAM=$2
        shift 2;;
    --global)
        OPT="global"
        PARAM=$2
        shift 2 ;;
    --list)
        OPT="list"
        shift;;
    --install)
        install_php_version $2
        shift 2;;
    --repositories)
        list_repos
        shift
        exit 0;;
    --add)
        add_repo $2
        shift 2
        exit 0;;
    --delete)
        delete_repo $2
        shift 2
        exit 0;;
    --versions)
        show_versions
        shift ;;
    --apache)
        APACHE=true
        shift;;
    -h|--help)
        show_help
        shift ;;
    --) shift ; break ;;
    *) echo "Internal error!" ; exit 1 ;;
  esac
done

case "$OPT" in
  local)
    if [ $APACHE = true ]
    then
      change_apache_local $PARAM
    else
      change_php_local $PARAM
    fi
    ;;
  global)
    if [ $APACHE = true ]
    then
      change_apache_global $PARAM
    else
      change_php_global $PARAM
    fi
    ;;
  list)
    if [ $APACHE = true ]
    then
      list_php_versions "apache"
    else
      list_php_versions "cli"
    fi
    ;;
esac
